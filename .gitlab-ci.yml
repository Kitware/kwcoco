# Autogenerated by ~/code/xcookie/xcookie/builders/gitlab_ci.py

stages:
# TEMPLATES
- build
- test
- gpgsign
- deploy
.common_template: &common_template
  tags:
    # Tags define which runners will accept which jobs
  - docker
  - linux-x86_64
  - build

  variables:
    # Change pip's cache directory to be inside the project directory
    # since we can only cache local items.
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  except:
    # Don't run the pipeline for new tags
  - tags

  cache:
    paths:
    - .cache/pip
.build_template: &build_template
  <<: *common_template
  stage: build
  before_script:
  - 'python -V  # Print out python version for debugging'
  script:
  - python -m pip install pip -U
  - python -m pip install setuptools>=0.8 wheel build
  - python -m build --wheel --outdir wheelhouse
  artifacts:
    paths:
    - wheelhouse/*.whl
.test_template: &test_template
  <<: *common_template
  stage: test
  coverage: /TOTAL.+ ([0-9]{1,3}%)/
.test_minimal-loose_template: &test_minimal-loose_template
  <<: *test_template
  before_script:
  - |-
    # Setup the correct version of python (which should be the same as this instance)
    python --version  # Print out python version for debugging
    export PYVER=$(python -c "import sys; print('{}{}'.format(*sys.version_info[0:2]))")
    python -m pip install virtualenv
    python -m virtualenv venv$PYVER
    source venv$PYVER/bin/activate
    pip install pip -U
    pip install pip setuptools -U
    pip install pygments
    python --version  # Print out python version for debugging
  script:
  - ls wheelhouse || echo "wheelhouse does not exist"
  - pip install tomli ubelt pkginfo
  - MOD_NAME=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['tool']['xcookie']['mod_name'])")
  - WHEEL_FPATH=$(python -c "import pathlib; print(str(sorted(pathlib.Path('wheelhouse').glob('$MOD_NAME*.whl'))[-1]).replace(chr(92),
    chr(47)))")
  - MOD_VERSION=$(python -c "from pkginfo import Wheel; print(Wheel('$WHEEL_FPATH').version)")
  - INSTALL_EXTRAS=tests,headless
  - echo "MOD_NAME=$MOD_NAME"
  - echo "WHEEL_FPATH=$WHEEL_FPATH"
  - echo "MOD_VERSION=$MOD_VERSION"
  - pip install -r requirements/gdal.txt
  - pip install "$MOD_NAME[$INSTALL_EXTRAS]==$MOD_VERSION" -f wheelhouse
  - |-
    mkdir -p sandbox && cd sandbox && pytest -s --xdoctest --xdoctest-verbose=3 --cov-config ../pyproject.toml --cov-report html --cov-report term --cov="$MOD_NAME" "$(python -c "import ubelt; print(ubelt.modname_to_modpath('${MOD_NAME}'))")" ../tests && cd ..
.test_full-loose_template: &test_full-loose_template
  <<: *test_template
  before_script:
  - |-
    # Setup the correct version of python (which should be the same as this instance)
    python --version  # Print out python version for debugging
    export PYVER=$(python -c "import sys; print('{}{}'.format(*sys.version_info[0:2]))")
    python -m pip install virtualenv
    python -m virtualenv venv$PYVER
    source venv$PYVER/bin/activate
    pip install pip -U
    pip install pip setuptools -U
    pip install pygments
    python --version  # Print out python version for debugging
  script:
  - ls wheelhouse || echo "wheelhouse does not exist"
  - pip install tomli ubelt pkginfo
  - MOD_NAME=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['tool']['xcookie']['mod_name'])")
  - WHEEL_FPATH=$(python -c "import pathlib; print(str(sorted(pathlib.Path('wheelhouse').glob('$MOD_NAME*.whl'))[-1]).replace(chr(92),
    chr(47)))")
  - MOD_VERSION=$(python -c "from pkginfo import Wheel; print(Wheel('$WHEEL_FPATH').version)")
  - INSTALL_EXTRAS=tests,optional,headless
  - echo "MOD_NAME=$MOD_NAME"
  - echo "WHEEL_FPATH=$WHEEL_FPATH"
  - echo "MOD_VERSION=$MOD_VERSION"
  - pip install -r requirements/gdal.txt
  - pip install "$MOD_NAME[$INSTALL_EXTRAS]==$MOD_VERSION" -f wheelhouse
  - |-
    mkdir -p sandbox && cd sandbox && pytest -s --xdoctest --xdoctest-verbose=3 --cov-config ../pyproject.toml --cov-report html --cov-report term --cov="$MOD_NAME" "$(python -c "import ubelt; print(ubelt.modname_to_modpath('${MOD_NAME}'))")" ../tests && cd ..
.test_minimal-strict_template: &test_minimal-strict_template
  <<: *test_template
  before_script:
  - |-
    # Setup the correct version of python (which should be the same as this instance)
    python --version  # Print out python version for debugging
    export PYVER=$(python -c "import sys; print('{}{}'.format(*sys.version_info[0:2]))")
    python -m pip install virtualenv
    python -m virtualenv venv$PYVER
    source venv$PYVER/bin/activate
    pip install pip -U
    pip install pip setuptools -U
    pip install pygments
    python --version  # Print out python version for debugging
  script:
  - ls wheelhouse || echo "wheelhouse does not exist"
  - pip install tomli ubelt pkginfo
  - MOD_NAME=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['tool']['xcookie']['mod_name'])")
  - WHEEL_FPATH=$(python -c "import pathlib; print(str(sorted(pathlib.Path('wheelhouse').glob('$MOD_NAME*.whl'))[-1]).replace(chr(92),
    chr(47)))")
  - MOD_VERSION=$(python -c "from pkginfo import Wheel; print(Wheel('$WHEEL_FPATH').version)")
  - INSTALL_EXTRAS=tests-strict,runtime-strict,headless-strict
  - echo "MOD_NAME=$MOD_NAME"
  - echo "WHEEL_FPATH=$WHEEL_FPATH"
  - echo "MOD_VERSION=$MOD_VERSION"
  - pip install -r requirements/gdal.txt
  - pip install "$MOD_NAME[$INSTALL_EXTRAS]==$MOD_VERSION" -f wheelhouse
  - |-
    mkdir -p sandbox && cd sandbox && pytest -s --xdoctest --xdoctest-verbose=3 --cov-config ../pyproject.toml --cov-report html --cov-report term --cov="$MOD_NAME" "$(python -c "import ubelt; print(ubelt.modname_to_modpath('${MOD_NAME}'))")" ../tests && cd ..
.test_full-strict_template: &test_full-strict_template
  <<: *test_template
  before_script:
  - |-
    # Setup the correct version of python (which should be the same as this instance)
    python --version  # Print out python version for debugging
    export PYVER=$(python -c "import sys; print('{}{}'.format(*sys.version_info[0:2]))")
    python -m pip install virtualenv
    python -m virtualenv venv$PYVER
    source venv$PYVER/bin/activate
    pip install pip -U
    pip install pip setuptools -U
    pip install pygments
    python --version  # Print out python version for debugging
  script:
  - ls wheelhouse || echo "wheelhouse does not exist"
  - pip install tomli ubelt pkginfo
  - MOD_NAME=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['tool']['xcookie']['mod_name'])")
  - WHEEL_FPATH=$(python -c "import pathlib; print(str(sorted(pathlib.Path('wheelhouse').glob('$MOD_NAME*.whl'))[-1]).replace(chr(92),
    chr(47)))")
  - MOD_VERSION=$(python -c "from pkginfo import Wheel; print(Wheel('$WHEEL_FPATH').version)")
  - INSTALL_EXTRAS=tests-strict,runtime-strict,optional-strict,headless-strict
  - echo "MOD_NAME=$MOD_NAME"
  - echo "WHEEL_FPATH=$WHEEL_FPATH"
  - echo "MOD_VERSION=$MOD_VERSION"
  - pip install -r requirements/gdal.txt
  - pip install "$MOD_NAME[$INSTALL_EXTRAS]==$MOD_VERSION" -f wheelhouse
  - |-
    mkdir -p sandbox && cd sandbox && pytest -s --xdoctest --xdoctest-verbose=3 --cov-config ../pyproject.toml --cov-report html --cov-report term --cov="$MOD_NAME" "$(python -c "import ubelt; print(ubelt.modname_to_modpath('${MOD_NAME}'))")" ../tests && cd ..
build/cp36-linux-x86_64:
  <<: *build_template
  image: python:3.6
test/minimal-loose/cp36-linux-x86_64:
  <<: *test_minimal-loose_template
  image: python:3.6
  needs:
  - build/cp36-linux-x86_64
test/full-loose/cp36-linux-x86_64:
  <<: *test_full-loose_template
  image: python:3.6
  needs:
  - build/cp36-linux-x86_64
test/minimal-strict/cp36-linux-x86_64:
  <<: *test_minimal-strict_template
  image: python:3.6
  needs:
  - build/cp36-linux-x86_64
test/full-strict/cp36-linux-x86_64:
  <<: *test_full-strict_template
  image: python:3.6
  needs:
  - build/cp36-linux-x86_64
build/cp37-linux-x86_64:
  <<: *build_template
  image: python:3.7
test/minimal-loose/cp37-linux-x86_64:
  <<: *test_minimal-loose_template
  image: python:3.7
  needs:
  - build/cp37-linux-x86_64
test/full-loose/cp37-linux-x86_64:
  <<: *test_full-loose_template
  image: python:3.7
  needs:
  - build/cp37-linux-x86_64
test/minimal-strict/cp37-linux-x86_64:
  <<: *test_minimal-strict_template
  image: python:3.7
  needs:
  - build/cp37-linux-x86_64
test/full-strict/cp37-linux-x86_64:
  <<: *test_full-strict_template
  image: python:3.7
  needs:
  - build/cp37-linux-x86_64
build/cp38-linux-x86_64:
  <<: *build_template
  image: python:3.8
test/minimal-loose/cp38-linux-x86_64:
  <<: *test_minimal-loose_template
  image: python:3.8
  needs:
  - build/cp38-linux-x86_64
test/full-loose/cp38-linux-x86_64:
  <<: *test_full-loose_template
  image: python:3.8
  needs:
  - build/cp38-linux-x86_64
test/minimal-strict/cp38-linux-x86_64:
  <<: *test_minimal-strict_template
  image: python:3.8
  needs:
  - build/cp38-linux-x86_64
test/full-strict/cp38-linux-x86_64:
  <<: *test_full-strict_template
  image: python:3.8
  needs:
  - build/cp38-linux-x86_64
build/cp39-linux-x86_64:
  <<: *build_template
  image: python:3.9
test/minimal-loose/cp39-linux-x86_64:
  <<: *test_minimal-loose_template
  image: python:3.9
  needs:
  - build/cp39-linux-x86_64
test/full-loose/cp39-linux-x86_64:
  <<: *test_full-loose_template
  image: python:3.9
  needs:
  - build/cp39-linux-x86_64
test/minimal-strict/cp39-linux-x86_64:
  <<: *test_minimal-strict_template
  image: python:3.9
  needs:
  - build/cp39-linux-x86_64
test/full-strict/cp39-linux-x86_64:
  <<: *test_full-strict_template
  image: python:3.9
  needs:
  - build/cp39-linux-x86_64
build/cp310-linux-x86_64:
  <<: *build_template
  image: python:3.10
test/minimal-loose/cp310-linux-x86_64:
  <<: *test_minimal-loose_template
  image: python:3.10
  needs:
  - build/cp310-linux-x86_64
test/full-loose/cp310-linux-x86_64:
  <<: *test_full-loose_template
  image: python:3.10
  needs:
  - build/cp310-linux-x86_64
test/minimal-strict/cp310-linux-x86_64:
  <<: *test_minimal-strict_template
  image: python:3.10
  needs:
  - build/cp310-linux-x86_64
test/full-strict/cp310-linux-x86_64:
  <<: *test_full-strict_template
  image: python:3.10
  needs:
  - build/cp310-linux-x86_64
gpgsign/wheels:
  <<: *common_template
  image: python:3.8
  stage: gpgsign
  artifacts:
    paths:
    - wheelhouse/*.asc

  only:
    refs:
        # Gitlab will only expose protected variables on protected branches
        # (which I've set to be main and release), so only run this stage
        # there.
    - master
    - main
    - release
  needs:
  - job: build/cp36-linux-x86_64
    artifacts: true
  - job: build/cp37-linux-x86_64
    artifacts: true
  - job: build/cp38-linux-x86_64
    artifacts: true
  - job: build/cp39-linux-x86_64
    artifacts: true
  - job: build/cp310-linux-x86_64
    artifacts: true
  script:
  - ls wheelhouse
  - export GPG_EXECUTABLE=gpg
  - export GPG_KEYID=$(cat dev/public_gpg_key)
  - echo "GPG_KEYID = $GPG_KEYID"
    # Decrypt and import GPG Keys / trust
    # note the variable pointed to by VARNAME_CI_SECRET is a protected variables only available on main and release branch
  - source dev/secrets_configuration.sh
  - CI_SECRET=${!VARNAME_CI_SECRET}
  - $GPG_EXECUTABLE --version
  - openssl version
  - $GPG_EXECUTABLE --list-keys
    # note CI_KITWARE_SECRET is a protected variables only available on main and release branch
  - CIS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:CIS -d -a
    -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import
  - CIS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:CIS -d -a
    -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
  - CIS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:CIS -d -a
    -in dev/ci_secret_gpg_subkeys.pgp.enc | $GPG_EXECUTABLE --import
  - GPG_SIGN_CMD="$GPG_EXECUTABLE --batch --yes --detach-sign --armor --local-user
    $GPG_KEYID"
  - |-
    WHEEL_PATHS=(wheelhouse/*.whl)
    WHEEL_PATHS_STR=$(printf '"%s" ' "${WHEEL_PATHS[@]}")
    echo "$WHEEL_PATHS_STR"
    for WHEEL_PATH in "${WHEEL_PATHS[@]}"
    do
        echo "------"
        echo "WHEEL_PATH = $WHEEL_PATH"
        $GPG_SIGN_CMD --output $WHEEL_PATH.asc $WHEEL_PATH
        $GPG_EXECUTABLE --verify $WHEEL_PATH.asc $WHEEL_PATH  || echo "hack, the first run of gpg very fails"
        $GPG_EXECUTABLE --verify $WHEEL_PATH.asc $WHEEL_PATH
    done
  - ls wheelhouse
deploy/wheels:
  <<: *common_template
  image: python:3.8
  stage: deploy
  only:
    refs:
    - release
  script:
  - pip install pyopenssl ndg-httpsclient pyasn1 requests[security] twine -U
  - ls wheelhouse
  - |-
    WHEEL_PATHS=(wheelhouse/*.whl)
    WHEEL_PATHS_STR=$(printf '"%s" ' "${WHEEL_PATHS[@]}")
    source dev/secrets_configuration.sh
    TWINE_PASSWORD=${!VARNAME_TWINE_PASSWORD}
    TWINE_USERNAME=${!VARNAME_TWINE_USERNAME}
    echo "$WHEEL_PATHS_STR"
    for WHEEL_PATH in "${WHEEL_PATHS[@]}"
    do
        twine check $WHEEL_PATH.asc $WHEEL_PATH
        twine upload --username $TWINE_USERNAME --password $TWINE_PASSWORD $WHEEL_PATH.asc $WHEEL_PATH || echo "upload already exists"
    done
  - |-
    # Have the server git-tag the release and push the tags
    export VERSION=$(python -c "import setup; print(setup.VERSION)")
    # do sed twice to handle the case of https clone with and without a read token
    URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g' | sed -e 's|git@||g' | sed -e 's|:|/|g')
    source dev/secrets_configuration.sh
    CI_SECRET=${!VARNAME_CI_SECRET}
    PUSH_TOKEN=${!VARNAME_PUSH_TOKEN}
    echo "URL_HOST = $URL_HOST"
    # A git config user name and email is required. Set if needed.
    if [[ "$(git config user.email)" == "" ]]; then
        git config user.email "ci@gitlab.org.com"
        git config user.name "Gitlab-CI"
    fi
    TAG_NAME="v${VERSION}"
    echo "TAG_NAME = $TAG_NAME"
    if [ $(git tag -l "$TAG_NAME") ]; then
        echo "Tag already exists"
    else
        # if we messed up we can delete the tag
        # git push origin :refs/tags/$TAG_NAME
        # and then tag with -f
        git tag $TAG_NAME -m "tarball tag $VERSION"
        git push --tags "https://git-push-token:${PUSH_TOKEN}@${URL_HOST}"
    fi


# end